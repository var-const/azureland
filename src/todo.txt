#include <cinder/app/App.h>
using ci::app::loadAsset;
using ci::app::console; console() << E.what() << endl;

#include <cinder/ImageIo.h>
using ci::loadImage; 
#include <cinder/gl/Texture.h>
// used as argument for ci::gl::draw
getSize()
enableAndBind()
getCleanBounds()
getAreaTexCoords()

#include <cinder/gl/gl.h>
gl::draw(Texture);

gl::translate(Object.GetCenterPos());
gl::rotate(Angle);

using ci::gl::enableAlphaBlending;
using ci::gl::SaveColorState;

using ci::gl::drawSolidRect;
extern DECLSPEC int SDLCALL SDL_RenderFillRect(SDL_Renderer * renderer,
                                               const SDL_Rect * rect);
using ci::gl::drawStrokedRect;
extern DECLSPEC int SDLCALL SDL_RenderDrawRect(SDL_Renderer * renderer,
                                               const SDL_Rect * rect);
using ci::gl::drawStrokedCircle;

#include <cinder/Color.h>
// only used for ci::gl::drawString
#include <cinder/Font.h>
// font name, font size
// only used for ci::gl::drawString
using ci::gl::color;
using ci::gl::drawString;

// math (mostly vector and rect), window and input handling, fonts and colors,
// rendering

DONE:
vector
key/mouse events

#include "rand.h"
using ci::rand_bool; using ci::rand_float; using ci::rand_int;

#include <cinder/CinderMath.h>
atan2
clamp

#include <cinder/Timer.h>
start()
getSeconds()

#include <cinder/Rect.h>
getSize()
getCenter()

using ci::app::getWindowSize;
using ci::app::getWindowBounds;

listen to SDL's input events and translate

gl::pushModelView(); -> glPushMatrix();
gl::popModelView(); -> glPopMatrix();

PROBABLY UNNECESSARY:

glEnableClientState( GL_VERTEX_ARRAY );
GLfloat verts[8];
glVertexPointer( 2, GL_FLOAT, 0, verts );
glEnableClientState( GL_TEXTURE_COORD_ARRAY );
GLfloat texCoords[8];
glTexCoordPointer( 2, GL_FLOAT, 0, texCoords );
glDrawArrays( GL_TRIANGLE_STRIP, 0, 4 );
glDisableClientState( GL_VERTEX_ARRAY );

TODO:
app basics











--------------------------------------------------------------------------------

void pushModelView()
{
	auto ctx = context();
	ctx->getModelMatrixStack().push_back( ctx->getModelMatrixStack().back() );
	ctx->getViewMatrixStack().push_back( ctx->getViewMatrixStack().back() );
}

void popModelView()
{
	auto ctx = context();
	ctx->getModelMatrixStack().pop_back();
	ctx->getViewMatrixStack().pop_back();
}
